---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Status - Quarterly Systems">
	<nav class="bg-white border-b border-gray-200">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-between items-center h-16">
				<div class="flex items-center">
					<a href="/" class="text-xl font-bold text-gray-900">Quarterly Systems</a>
				</div>
				<div class="hidden md:block">
					<div class="ml-10 flex items-baseline space-x-4">
						<a href="/apps" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Apps</a>
						<a href="#knowledge" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Knowledge Base</a>
						<a href="/waitlist" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Contact</a>
					</div>
				</div>
			</div>
		</div>
	</nav>

	<main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
		<div class="text-center mb-12">
			<h1 class="text-4xl font-bold text-gray-900 mb-4">Operational Status</h1>
			<p class="text-xl text-gray-600">
				Latest updates and activity across Quarterly Systems platforms.
			</p>
		</div>

		<!-- Executive Location Section -->
		<div class="bg-black rounded-2xl p-12 mb-16 mx-auto max-w-4xl">
			<div class="text-center mb-8">
				<h2 class="text-2xl font-bold text-white mb-2">Latest Operational Activity</h2>
			</div>
			<div class="flex justify-center">
				<div id="map-container" class="w-full h-96 rounded-lg overflow-hidden"></div>
			</div>
			<div class="mt-6 text-center">
				<div class="text-lg font-semibold text-white" id="location-name">Los Angeles, CA</div>
				<div class="text-sm text-gray-400" id="location-timestamp">Last seen: 2 hours ago</div>
			</div>
		</div>

		<!-- Activity Feed Section -->
		<div class="bg-white rounded-2xl shadow-sm border border-gray-200 p-8 mb-12 mx-auto max-w-4xl">
			<div class="flex items-center justify-between mb-6">
				<h2 class="text-2xl font-bold text-gray-900">Recent Activity</h2>
				<div class="text-sm text-gray-500" id="last-updated">Loading...</div>
			</div>
			<div id="activity-feed" class="space-y-4">
				<!-- Activity items will be loaded here -->
				<div class="flex items-center justify-center p-8">
					<div class="text-gray-500">Loading recent activity...</div>
				</div>
			</div>
			<div class="mt-6 text-center">
				<a href="/status/history" class="inline-flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium">
					View Complete Activity History
					<svg class="ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
						<path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
					</svg>
				</a>
			</div>
		</div>

	</main>

	<!-- Footer -->
	<footer class="bg-white border-t border-gray-200 mt-16">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
			<div class="flex flex-col md:flex-row justify-between items-center">
				<div class="mb-4 md:mb-0">
					<span class="text-sm text-gray-500">© 2025 Quarterly Systems</span>
					<br>
					<span class="text-xs text-gray-400">a <a href="https://kmikeym.com" class="hover:text-gray-600 transition-colors">K5M</a> company</span>
				</div>
				<div class="flex space-x-6">
					<a href="/about" class="text-sm text-gray-500 hover:text-gray-900">About</a>
					<span class="text-gray-300">·</span>
					<a href="/changelog" class="text-sm text-gray-500 hover:text-gray-900">Changelog</a>
					<span class="text-gray-300">·</span>
					<a href="/contact" class="text-sm text-gray-500 hover:text-gray-900">Contact</a>
					<span class="text-gray-300">·</span>
					<a href="/status" class="text-purple-600 hover:text-purple-700">Status</a>
				</div>
			</div>
		</div>
	</footer>
</Layout>

<script>
	import L from 'leaflet';

	// Wait for DOM to be loaded
	document.addEventListener('DOMContentLoaded', function() {
		const mapContainer = document.getElementById('map-container');
		if (!mapContainer) return;

		// Los Angeles coordinates
		const losAngeles = [34.0522, -118.2437];

		// Initialize map with corporate styling
		const map = L.map('map-container', {
			center: losAngeles,
			zoom: 10,
			zoomControl: false,
			attributionControl: false,
			scrollWheelZoom: false,
			doubleClickZoom: false,
			dragging: false,
			touchZoom: false,
			boxZoom: false,
			keyboard: false
		});

		// Add CartoDB Dark Matter tile layer
		L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
			attribution: '',
			subdomains: 'abcd'
		}).addTo(map);

		// Custom blinking green marker icon
		const customIcon = L.divIcon({
			className: 'custom-marker',
			html: `
				<div class="w-4 h-4 bg-green-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
				<div class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-2 h-2 bg-green-400 rotate-45"></div>
			`,
			iconSize: [16, 24],
			iconAnchor: [8, 24]
		});

		// Add marker for current location
		const marker = L.marker(losAngeles, { icon: customIcon }).addTo(map);

		// Make map and marker globally accessible for updates
		window.mapInstance = map;
		window.markerInstance = marker;

		// Add subtle zoom animation on load
		setTimeout(() => {
			map.setView(losAngeles, 12, { animate: true, duration: 2 });
		}, 1000);

		// Load activity data
		loadActivityData();
	});

	// Activity data loading and rendering
	async function loadActivityData() {
		try {
			const response = await fetch('https://status-api.quarterly.systems/api/status');
			if (!response.ok) {
				throw new Error('Failed to fetch status data');
			}

			const data = await response.json();
			renderActivityFeed(data.activities || []);
			updateLastUpdated(data.lastUpdate);
			updateLocationInfo(data.location);
		} catch (error) {
			console.error('Error loading activity data:', error);
			renderFallbackActivity();
		}
	}

	function renderActivityFeed(activities) {
		const feed = document.getElementById('activity-feed');
		if (!feed) return;

		if (activities.length === 0) {
			feed.innerHTML = `
				<div class="flex items-center justify-center p-8">
					<div class="text-gray-500">No recent activity found</div>
				</div>
			`;
			return;
		}

		const activityHTML = activities.map(activity => {
			const timeAgo = getTimeAgo(new Date(activity.timestamp));
			const { color, bgColor } = getActivityColors(activity.type);

			return `
				<div class="flex items-start space-x-4 p-4 bg-gray-50 rounded-lg">
					<div class="w-2 h-2 ${color} rounded-full mt-2"></div>
					<div class="flex-1">
						<div class="flex items-center justify-between mb-1">
							${activity.metadata?.link ?
								`<h3 class="font-medium text-gray-900"><a href="${activity.metadata.link}" target="_blank" class="hover:text-blue-600 transition-colors">${activity.title}</a></h3>` :
								`<h3 class="font-medium text-gray-900">${activity.title}</h3>`
							}
							<span class="text-sm text-gray-500">${timeAgo}</span>
						</div>
						<p class="text-sm text-gray-600">
							${activity.metadata?.link ?
								`<a href="${activity.metadata.link}" target="_blank" class="hover:text-blue-600 transition-colors">${activity.description}</a>` :
								activity.description
							}
						</p>
						<div class="flex items-center justify-between mt-2">
							<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${bgColor}">
								${activity.source}
							</span>
							${activity.location ?
								`<span class="text-xs text-gray-500 flex items-center">
									<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
									</svg>
									${activity.location}
								</span>` : ''
							}
						</div>
					</div>
				</div>
			`;
		}).join('');

		feed.innerHTML = activityHTML;
	}

	function renderFallbackActivity() {
		const feed = document.getElementById('activity-feed');
		if (!feed) return;

		// Fallback to mock data if API fails
		const fallbackHTML = `
			<div class="flex items-start space-x-4 p-4 bg-gray-50 rounded-lg">
				<div class="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
				<div class="flex-1">
					<div class="flex items-center justify-between mb-1">
						<h3 class="font-medium text-gray-900">System Deployment</h3>
						<span class="text-sm text-gray-500">2 hours ago</span>
					</div>
					<p class="text-sm text-gray-600">quarterly-systems-landing deployed to production</p>
					<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 mt-2">
						Deployment
					</span>
				</div>
			</div>
			<div class="flex items-start space-x-4 p-4 bg-gray-50 rounded-lg">
				<div class="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
				<div class="flex-1">
					<div class="flex items-center justify-between mb-1">
						<h3 class="font-medium text-gray-900">Development Activity</h3>
						<span class="text-sm text-gray-500">4 hours ago</span>
					</div>
					<p class="text-sm text-gray-600">Recent commits to multiple repositories</p>
					<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mt-2">
						GitHub
					</span>
				</div>
			</div>
		`;

		feed.innerHTML = fallbackHTML;
	}

	function getActivityColors(type) {
		const colors = {
			development: { color: 'bg-blue-500', bgColor: 'bg-blue-100 text-blue-800' },
			deployment: { color: 'bg-green-500', bgColor: 'bg-green-100 text-green-800' },
			content: { color: 'bg-purple-500', bgColor: 'bg-purple-100 text-purple-800' },
			research: { color: 'bg-yellow-500', bgColor: 'bg-yellow-100 text-yellow-800' },
			location: { color: 'bg-orange-500', bgColor: 'bg-orange-100 text-orange-800' }
		};

		return colors[type] || { color: 'bg-gray-500', bgColor: 'bg-gray-100 text-gray-800' };
	}

	function getTimeAgo(date) {
		const now = new Date();
		const diff = now - date;
		const minutes = Math.floor(diff / 60000);
		const hours = Math.floor(diff / 3600000);
		const days = Math.floor(diff / 86400000);

		if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
		if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
		if (minutes > 0) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
		return 'Just now';
	}

	function updateLastUpdated(timestamp) {
		const element = document.getElementById('last-updated');
		if (element && timestamp) {
			const updateTime = new Date(timestamp);
			element.textContent = `Updated ${getTimeAgo(updateTime)}`;
		}
	}

	function updateLocationInfo(location) {
		if (!location) return;

		const nameElement = document.getElementById('location-name');
		const timestampElement = document.getElementById('location-timestamp');

		if (nameElement) {
			nameElement.textContent = location.name;
		}

		if (timestampElement && location.lastSeen) {
			const lastSeen = new Date(location.lastSeen);
			timestampElement.textContent = `Last seen: ${getTimeAgo(lastSeen)}`;
		}

		// Update map position if coordinates are available
		if (location.coordinates && window.mapInstance && window.markerInstance) {
			const newCoords = [location.coordinates[0], location.coordinates[1]];
			window.mapInstance.setView(newCoords, 12, { animate: true, duration: 2 });
			window.markerInstance.setLatLng(newCoords);
		}
	}
</script>

<style>
	/* Import Leaflet CSS */
	@import 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';

	#map-container {
		height: 384px;
		width: 100%;
		border-radius: 12px;
		overflow: hidden;
	}

	/* Dark Matter map styling - no additional filters needed */

	/* Custom marker styling */
	:global(.custom-marker) {
		position: relative;
	}

	/* Executive location info styling */
	#location-name {
		text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
	}

	#location-timestamp {
		opacity: 0.8;
	}
</style>