---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Status - Quarterly Systems">
	<nav class="bg-white border-b border-gray-200">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-between items-center h-16">
				<div class="flex items-center">
					<a href="/" class="text-xl font-bold text-gray-900">Quarterly Systems</a>
				</div>
				<div class="hidden md:block">
					<div class="ml-10 flex items-baseline space-x-4">
						<a href="https://vibecode.quarterly.systems" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium flex items-center transition-all duration-200">
							Product
							<span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">beta</span>
						</a>
						<a href="/apps" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Apps</a>
						<a href="#knowledge" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Knowledge Base</a>
						<a href="/waitlist" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Waitlist</a>
					</div>
				</div>
			</div>
		</div>
	</nav>

	<main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
		<div class="text-center mb-12">
			<h1 class="text-4xl font-bold text-gray-900 mb-4">Global System Status</h1>
			<p class="text-xl text-gray-600">
				Real-time operational status across all Quarterly Systems platforms
			</p>
		</div>

		<!-- Globe Section -->
		<div class="flex justify-center mb-16">
			<div id="globe-container" class="w-80 h-80"></div>
		</div>

		<!-- Status Grid -->
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
			<!-- VibeCode Platform -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">VibeCode Platform</h3>
					<div class="flex items-center">
						<div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
						<span class="text-sm text-green-600 font-medium">Operational</span>
					</div>
				</div>
				<p class="text-gray-600 text-sm mb-3">vibecode.quarterly.systems</p>
				<div class="space-y-2 text-sm">
					<div class="flex justify-between">
						<span class="text-gray-500">Uptime</span>
						<span class="text-gray-900">99.9%</span>
					</div>
					<div class="flex justify-between">
						<span class="text-gray-500">Response Time</span>
						<span class="text-gray-900">142ms</span>
					</div>
				</div>
			</div>

			<!-- Office Communications -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">Office Communications</h3>
					<div class="flex items-center">
						<div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
						<span class="text-sm text-green-600 font-medium">Operational</span>
					</div>
				</div>
				<p class="text-gray-600 text-sm mb-3">office.quarterly.systems</p>
				<div class="space-y-2 text-sm">
					<div class="flex justify-between">
						<span class="text-gray-500">Uptime</span>
						<span class="text-gray-900">99.8%</span>
					</div>
					<div class="flex justify-between">
						<span class="text-gray-500">Response Time</span>
						<span class="text-gray-900">89ms</span>
					</div>
				</div>
			</div>

			<!-- Main Website -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">Main Website</h3>
					<div class="flex items-center">
						<div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
						<span class="text-sm text-green-600 font-medium">Operational</span>
					</div>
				</div>
				<p class="text-gray-600 text-sm mb-3">quarterly.systems</p>
				<div class="space-y-2 text-sm">
					<div class="flex justify-between">
						<span class="text-gray-500">Uptime</span>
						<span class="text-gray-900">99.9%</span>
					</div>
					<div class="flex justify-between">
						<span class="text-gray-500">Response Time</span>
						<span class="text-gray-900">76ms</span>
					</div>
				</div>
			</div>
		</div>

		<!-- Incidents Section -->
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
			<h2 class="text-2xl font-bold text-gray-900 mb-6">Recent Incidents</h2>
			<div class="space-y-4">
				<div class="flex items-start space-x-4 p-4 bg-green-50 rounded-lg border border-green-200">
					<div class="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
					<div class="flex-1">
						<div class="flex items-center justify-between mb-2">
							<h3 class="font-medium text-gray-900">All Systems Operational</h3>
							<span class="text-sm text-gray-500">Last 30 days</span>
						</div>
						<p class="text-sm text-gray-600">No incidents reported in the past 30 days. All systems running smoothly.</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Performance Metrics -->
		<div class="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
				<div class="text-3xl font-bold text-blue-600 mb-2">99.9%</div>
				<div class="text-gray-600">Average Uptime</div>
			</div>
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
				<div class="text-3xl font-bold text-purple-600 mb-2">102ms</div>
				<div class="text-gray-600">Average Response</div>
			</div>
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
				<div class="text-3xl font-bold text-green-600 mb-2">0</div>
				<div class="text-gray-600">Active Incidents</div>
			</div>
		</div>
	</main>

	<!-- Footer -->
	<footer class="bg-white border-t border-gray-200 mt-16">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
			<div class="flex flex-col md:flex-row justify-between items-center">
				<div class="mb-4 md:mb-0">
					<span class="text-sm text-gray-500">© 2025 Quarterly Systems</span>
				</div>
				<div class="flex space-x-6">
					<a href="/about" class="text-sm text-gray-500 hover:text-gray-900">About</a>
					<span class="text-gray-300">·</span>
					<a href="/changelog" class="text-sm text-gray-500 hover:text-gray-900">Changelog</a>
					<span class="text-gray-300">·</span>
					<a href="/contact" class="text-sm text-gray-500 hover:text-gray-900">Contact</a>
					<span class="text-gray-300">·</span>
					<a href="/status" class="text-purple-600 hover:text-purple-700">Status</a>
				</div>
			</div>
		</div>
	</footer>
</Layout>

<script>
	import * as THREE from 'three';

	// Wait for DOM to be loaded
	document.addEventListener('DOMContentLoaded', function() {
		const container = document.getElementById('globe-container');
		if (!container) return;

		// Scene setup
		const scene = new THREE.Scene();
		const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
		const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

		renderer.setSize(320, 320);
		renderer.setClearColor(0x000000, 0);
		container.appendChild(renderer.domElement);

		// Create sphere geometry
		const geometry = new THREE.SphereGeometry(1, 64, 64);

		// Create dotted material with world map pattern
		const material = new THREE.ShaderMaterial({
			uniforms: {
				time: { value: 0 }
			},
			vertexShader: `
				varying vec2 vUv;
				varying vec3 vPosition;

				void main() {
					vUv = uv;
					vPosition = position;
					gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
				}
			`,
			fragmentShader: `
				uniform float time;
				varying vec2 vUv;
				varying vec3 vPosition;

				// Simple continent shapes using UV coordinates
				bool isLand(vec2 uv) {
					vec2 pos = uv;

					// North America
					if (pos.x > 0.1 && pos.x < 0.4 && pos.y > 0.3 && pos.y < 0.8) {
						float dist = distance(pos, vec2(0.25, 0.6));
						if (dist < 0.15) return true;
					}

					// Europe/Africa
					if (pos.x > 0.45 && pos.x < 0.65 && pos.y > 0.2 && pos.y < 0.9) {
						return true;
					}

					// Asia
					if (pos.x > 0.65 && pos.x < 0.95 && pos.y > 0.3 && pos.y < 0.8) {
						return true;
					}

					// Australia
					if (pos.x > 0.8 && pos.x < 0.9 && pos.y > 0.1 && pos.y < 0.3) {
						return true;
					}

					return false;
				}

				void main() {
					vec2 uv = vUv;

					// Create dotted pattern
					vec2 dotUv = uv * 40.0;
					vec2 dotGrid = fract(dotUv) - 0.5;
					float dotDist = length(dotGrid);

					// Base dark sphere
					vec3 color = vec3(0.2, 0.25, 0.3);

					// Add dots for land masses
					if (isLand(uv) && dotDist < 0.2) {
						color = vec3(0.3, 0.6, 1.0); // Blue dots for land
					}

					// Add some ocean dots
					if (!isLand(uv) && dotDist < 0.1 && sin(dotUv.x * 3.14) * sin(dotUv.y * 3.14) > 0.7) {
						color = vec3(0.1, 0.3, 0.6); // Darker blue for ocean
					}

					// Add atmospheric glow
					vec3 normal = normalize(vPosition);
					float fresnel = pow(1.0 - abs(dot(normal, vec3(0.0, 0.0, 1.0))), 2.0);
					color += fresnel * vec3(0.1, 0.2, 0.4);

					gl_FragColor = vec4(color, 1.0);
				}
			`,
			transparent: true
		});

		// Create globe mesh
		const globe = new THREE.Mesh(geometry, material);
		scene.add(globe);

		// Position camera
		camera.position.z = 3;

		// Animation loop
		function animate() {
			requestAnimationFrame(animate);

			// Rotate globe
			globe.rotation.y += 0.005;

			// Update time uniform
			material.uniforms.time.value += 0.01;

			renderer.render(scene, camera);
		}

		animate();

		// Handle resize
		function handleResize() {
			const size = Math.min(container.clientWidth, container.clientHeight);
			renderer.setSize(size, size);
		}

		window.addEventListener('resize', handleResize);
		handleResize();
	});
</script>

<style>
	#globe-container {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	#globe-container canvas {
		border-radius: 50%;
		box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
	}
</style>