---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Status - Quarterly Systems">
	<nav class="bg-white border-b border-gray-200">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="flex justify-between items-center h-16">
				<div class="flex items-center">
					<a href="/" class="text-xl font-bold text-gray-900">Quarterly Systems</a>
				</div>
				<div class="hidden md:block">
					<div class="ml-10 flex items-baseline space-x-4">
						<a href="https://vibecode.quarterly.systems" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium flex items-center transition-all duration-200">
							Product
							<span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">beta</span>
						</a>
						<a href="/apps" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Apps</a>
						<a href="#knowledge" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Knowledge Base</a>
						<a href="/waitlist" class="text-gray-600 hover:text-purple-600 hover:shadow-lg hover:shadow-purple-500/25 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200">Waitlist</a>
					</div>
				</div>
			</div>
		</div>
	</nav>

	<main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
		<div class="text-center mb-12">
			<h1 class="text-4xl font-bold text-gray-900 mb-4">Global System Status</h1>
			<p class="text-xl text-gray-600">
				Real-time operational status across all Quarterly Systems platforms
			</p>
		</div>

		<!-- Globe Section -->
		<div class="bg-black rounded-2xl p-12 mb-16 mx-auto max-w-4xl">
			<div class="flex justify-center">
				<div id="globe-container" class="w-96 h-96"></div>
			</div>
		</div>

		<!-- Status Grid -->
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
			<!-- VibeCode Platform -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">VibeCode Platform</h3>
					<div class="flex items-center">
						<div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
						<span class="text-sm text-green-600 font-medium">Operational</span>
					</div>
				</div>
				<p class="text-gray-600 text-sm mb-3">vibecode.quarterly.systems</p>
				<div class="space-y-2 text-sm">
					<div class="flex justify-between">
						<span class="text-gray-500">Uptime</span>
						<span class="text-gray-900">99.9%</span>
					</div>
					<div class="flex justify-between">
						<span class="text-gray-500">Response Time</span>
						<span class="text-gray-900">142ms</span>
					</div>
				</div>
			</div>

			<!-- Office Communications -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">Office Communications</h3>
					<div class="flex items-center">
						<div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
						<span class="text-sm text-green-600 font-medium">Operational</span>
					</div>
				</div>
				<p class="text-gray-600 text-sm mb-3">office.quarterly.systems</p>
				<div class="space-y-2 text-sm">
					<div class="flex justify-between">
						<span class="text-gray-500">Uptime</span>
						<span class="text-gray-900">99.8%</span>
					</div>
					<div class="flex justify-between">
						<span class="text-gray-500">Response Time</span>
						<span class="text-gray-900">89ms</span>
					</div>
				</div>
			</div>

			<!-- Main Website -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex items-center justify-between mb-4">
					<h3 class="text-lg font-semibold text-gray-900">Main Website</h3>
					<div class="flex items-center">
						<div class="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
						<span class="text-sm text-green-600 font-medium">Operational</span>
					</div>
				</div>
				<p class="text-gray-600 text-sm mb-3">quarterly.systems</p>
				<div class="space-y-2 text-sm">
					<div class="flex justify-between">
						<span class="text-gray-500">Uptime</span>
						<span class="text-gray-900">99.9%</span>
					</div>
					<div class="flex justify-between">
						<span class="text-gray-500">Response Time</span>
						<span class="text-gray-900">76ms</span>
					</div>
				</div>
			</div>
		</div>

		<!-- Incidents Section -->
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8">
			<h2 class="text-2xl font-bold text-gray-900 mb-6">Recent Incidents</h2>
			<div class="space-y-4">
				<div class="flex items-start space-x-4 p-4 bg-green-50 rounded-lg border border-green-200">
					<div class="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
					<div class="flex-1">
						<div class="flex items-center justify-between mb-2">
							<h3 class="font-medium text-gray-900">All Systems Operational</h3>
							<span class="text-sm text-gray-500">Last 30 days</span>
						</div>
						<p class="text-sm text-gray-600">No incidents reported in the past 30 days. All systems running smoothly.</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Performance Metrics -->
		<div class="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
				<div class="text-3xl font-bold text-blue-600 mb-2">99.9%</div>
				<div class="text-gray-600">Average Uptime</div>
			</div>
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
				<div class="text-3xl font-bold text-purple-600 mb-2">102ms</div>
				<div class="text-gray-600">Average Response</div>
			</div>
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 text-center">
				<div class="text-3xl font-bold text-green-600 mb-2">0</div>
				<div class="text-gray-600">Active Incidents</div>
			</div>
		</div>
	</main>

	<!-- Footer -->
	<footer class="bg-white border-t border-gray-200 mt-16">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
			<div class="flex flex-col md:flex-row justify-between items-center">
				<div class="mb-4 md:mb-0">
					<span class="text-sm text-gray-500">© 2025 Quarterly Systems</span>
					<br>
					<span class="text-xs text-gray-400">a <a href="https://kmikeym.com" class="hover:text-gray-600 transition-colors">K5M</a> company</span>
				</div>
				<div class="flex space-x-6">
					<a href="/about" class="text-sm text-gray-500 hover:text-gray-900">About</a>
					<span class="text-gray-300">·</span>
					<a href="/changelog" class="text-sm text-gray-500 hover:text-gray-900">Changelog</a>
					<span class="text-gray-300">·</span>
					<a href="/contact" class="text-sm text-gray-500 hover:text-gray-900">Contact</a>
					<span class="text-gray-300">·</span>
					<a href="/status" class="text-purple-600 hover:text-purple-700">Status</a>
				</div>
			</div>
		</div>
	</footer>
</Layout>

<script>
	import * as THREE from 'three';

	// Wait for DOM to be loaded
	document.addEventListener('DOMContentLoaded', function() {
		const container = document.getElementById('globe-container');
		if (!container) return;

		// Scene setup
		const scene = new THREE.Scene();
		const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
		const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

		renderer.setSize(384, 384);
		renderer.setClearColor(0x000000, 0);
		container.appendChild(renderer.domElement);

		// Lighting setup
		const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);
		scene.add(ambientLight);

		const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
		directionalLight.position.set(5, 3, 5);
		scene.add(directionalLight);

		// Globe group for rotation
		const globeGroup = new THREE.Group();
		scene.add(globeGroup);

		// Enhanced land detection
		function isLandPoint(lat, lon) {
			const continents = [
				// North America
				{ latMin: 25, latMax: 70, lonMin: -170, lonMax: -50 },
				{ latMin: 15, latMax: 32, lonMin: -125, lonMax: -80 },
				// South America
				{ latMin: -60, latMax: 15, lonMin: -85, lonMax: -30 },
				// Europe
				{ latMin: 35, latMax: 75, lonMin: -15, lonMax: 45 },
				{ latMin: 60, latMax: 82, lonMin: -25, lonMax: 70 },
				// Africa
				{ latMin: -35, latMax: 40, lonMin: -20, lonMax: 55 },
				// Asia
				{ latMin: 5, latMax: 80, lonMin: 25, lonMax: 180 },
				{ latMin: 40, latMax: 75, lonMin: 40, lonMax: 180 },
				{ latMin: -10, latMax: 30, lonMin: 60, lonMax: 150 },
				// Australia and Oceania
				{ latMin: -50, latMax: -10, lonMin: 110, lonMax: 180 },
				{ latMin: -25, latMax: 0, lonMin: 130, lonMax: 180 },
			];

			return continents.some(continent =>
				lat >= continent.latMin && lat <= continent.latMax &&
				lon >= continent.lonMin && lon <= continent.lonMax
			);
		}

		function getRegion(lat, lon) {
			if (lat > 25 && lon > -170 && lon < -50) return 'north_america';
			if (lat > -60 && lat < 15 && lon > -85 && lon < -30) return 'south_america';
			if (lat > 35 && lat < 75 && lon > -15 && lon < 45) return 'europe';
			if (lat > -35 && lat < 40 && lon > -20 && lon < 55) return 'africa';
			if (lat > 5 && lat < 80 && lon > 25 && lon < 180) return 'asia';
			if (lat > -45 && lat < -10 && lon > 110 && lon < 160) return 'australia';
			return 'other';
		}

		// Generate world dots with higher density
		function generateWorldDots() {
			const dots = [];
			const step = 1.5; // Smaller step for more dots

			for (let lat = -90; lat <= 90; lat += step) {
				const lonStep = step / Math.cos(lat * Math.PI / 180);
				for (let lon = -180; lon <= 180; lon += lonStep) {
					if (isLandPoint(lat, lon)) {
						// Convert lat/lng to 3D sphere coordinates
						const phi = (90 - lat) * (Math.PI / 180);
						const theta = (lon + 180) * (Math.PI / 180);

						const x = -(Math.sin(phi) * Math.cos(theta));
						const z = Math.sin(phi) * Math.sin(theta);
						const y = Math.cos(phi);

						dots.push({
							position: new THREE.Vector3(x, y, z),
							lat,
							lon,
							region: getRegion(lat, lon)
						});
					}
				}
			}

			return dots;
		}

		// Color schemes
		const colorScheme = {
			land: [0x70d6ff, 0xe9ff70, 0xffd670, 0xff9770, 0xff70a6],
			atmosphere: 0x70d6ff
		};

		// Generate dots and group by region
		const worldDots = generateWorldDots();
		const dotsByRegion = {};

		worldDots.forEach(dot => {
			if (!dotsByRegion[dot.region]) {
				dotsByRegion[dot.region] = [];
			}
			dotsByRegion[dot.region].push(dot);
		});

		// Create instanced meshes for better performance
		const dotMeshes = [];
		const circleGeometry = new THREE.CircleGeometry(0.012, 8);

		Object.entries(dotsByRegion).forEach(([region, dots], index) => {
			const instancedMesh = new THREE.InstancedMesh(
				circleGeometry,
				new THREE.MeshLambertMaterial({
					color: colorScheme.land[index % colorScheme.land.length],
					transparent: true,
					opacity: 0.9,
					side: THREE.DoubleSide
				}),
				dots.length
			);

			const matrix = new THREE.Matrix4();

			dots.forEach((dot, i) => {
				// Position and orient circle to face outward from sphere
				matrix.setPosition(dot.position.x, dot.position.y, dot.position.z);

				const lookAtMatrix = new THREE.Matrix4();
				lookAtMatrix.lookAt(dot.position, new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));
				matrix.multiply(lookAtMatrix);

				instancedMesh.setMatrixAt(i, matrix);
			});

			instancedMesh.instanceMatrix.needsUpdate = true;
			globeGroup.add(instancedMesh);
			dotMeshes.push({ mesh: instancedMesh, dots, region });
		});

		// Atmosphere effect
		const atmosphereGeometry = new THREE.SphereGeometry(1.03, 32, 32);
		const atmosphereMaterial = new THREE.MeshBasicMaterial({
			color: colorScheme.atmosphere,
			transparent: true,
			opacity: 0.15,
			side: THREE.BackSide
		});
		const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
		globeGroup.add(atmosphere);

		// Mouse interaction
		let isDragging = false;
		let previousMousePosition = { x: 0, y: 0 };
		let autoRotate = true;

		const handleMouseDown = (event) => {
			isDragging = true;
			autoRotate = false;
			previousMousePosition = {
				x: event.clientX,
				y: event.clientY
			};
		};

		const handleMouseMove = (event) => {
			if (isDragging) {
				const deltaMove = {
					x: event.clientX - previousMousePosition.x,
					y: event.clientY - previousMousePosition.y
				};

				const deltaRotationQuaternion = new THREE.Quaternion()
					.setFromEuler(new THREE.Euler(
						deltaMove.y * 0.01,
						deltaMove.x * 0.01,
						0,
						'XYZ'
					));

				globeGroup.quaternion.multiplyQuaternions(deltaRotationQuaternion, globeGroup.quaternion);

				previousMousePosition = {
					x: event.clientX,
					y: event.clientY
				};
			}
		};

		const handleMouseUp = () => {
			isDragging = false;
			// Resume auto-rotate after a delay
			setTimeout(() => {
				if (!isDragging) autoRotate = true;
			}, 3000);
		};

		const handleWheel = (event) => {
			event.preventDefault();
			const scale = event.deltaY > 0 ? 1.1 : 0.9;
			camera.position.multiplyScalar(scale);
			camera.position.clampLength(1.5, 6);
		};

		// Add event listeners
		renderer.domElement.addEventListener('mousedown', handleMouseDown);
		renderer.domElement.addEventListener('mousemove', handleMouseMove);
		renderer.domElement.addEventListener('mouseup', handleMouseUp);
		renderer.domElement.addEventListener('wheel', handleWheel);

		// Position camera
		camera.position.z = 3;

		// Animation loop
		const clock = new THREE.Clock();
		function animate() {
			requestAnimationFrame(animate);

			const elapsed = clock.getElapsedTime();

			// Auto rotation when not dragging
			if (autoRotate && !isDragging) {
				globeGroup.rotation.y += 0.003;
			}

			// Subtle pulsing effect for dots
			dotMeshes.forEach((meshData, index) => {
				const pulse = Math.sin(elapsed * 1.5 + index * 0.5) * 0.1 + 1;
				meshData.mesh.material.opacity = 0.7 + pulse * 0.2;
			});

			renderer.render(scene, camera);
		}

		animate();

		// Handle resize
		function handleResize() {
			const size = Math.min(container.clientWidth, container.clientHeight);
			renderer.setSize(size, size);
		}

		window.addEventListener('resize', handleResize);
		handleResize();

		// Cleanup function
		return () => {
			renderer.domElement.removeEventListener('mousedown', handleMouseDown);
			renderer.domElement.removeEventListener('mousemove', handleMouseMove);
			renderer.domElement.removeEventListener('mouseup', handleMouseUp);
			renderer.domElement.removeEventListener('wheel', handleWheel);
			circleGeometry.dispose();
			renderer.dispose();
		};
	});
</script>

<style>
	#globe-container {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	#globe-container canvas {
		border-radius: 50%;
		box-shadow: 0 0 60px rgba(112, 214, 255, 0.3), 0 0 120px rgba(112, 214, 255, 0.1);
	}
</style>